// ******************************************************************************************************* //
// ************************************** COMMON TO-DO LIST ********************************************** //
// ******************************************************************************************************* //

GLOBAL TASKS:
	  
S- Skeletal Animation
	S- Debug mesh skinning
	S- Find a way to handle normals
	S- Do keyframe interpolation

G- Shaders
	1(G)- Load vert and frag
	1(G)- Apply a shader to a whole scene
	1(G)- Apply a shader to a single object
	1(G)- Diffuse Shader
	1(G)- Diffuse Shader + Highlight
	1(G)- Use Frag shaders
	   G- make the highlight "follow" the camera
	   G- Fix the color of the scenenodes names
	   G- Fix names in shader section of asset manager
	   G- Improve Performance for a single object shader, if possible
	    
V- V8 Javascript Scripting Integration
	1(V)- Compile V8
	1(V)- Compile Scripts
	1(V)- Run Scripts
	1(V)- Return Values from scripts
	1(V)- ScriptHandler class imports V8 
	1(V)- ScriptHandler Compiles Scripts
	1(V)- ScriptHandler Runs Scripts
	1(V)- ScriptHandler Return Values from scripts
	1(V)- runScript accepts filename and function name
	1(V)- Call global engine functions like log methods from script
	   V- Create an Object in a script
	0- Implement the most used engine functions
	0- startEngine mode
	0- stopEngine mode
	0- move logic into scripts as much as possible

1(V)- Logging system with verbosity levels
	1(V)- addToLog()
	1(V)- clearLog()
	1(V)- VerbosityLevel variable in globals.h
	1(V)- Logging Files names in globals.h
	   0- Put log methods in the Engine

0- FrameClock Class as a Singleton
0- better thread synch and use
0- make everything framerate independent
0- inputmanager interface to gameplay programmers?
0- optimizations for the Transformation Class
0- optimize debug cout and logs with "if define"
	

OPTIONALS:

0- store a list of pointers inside the memory manager stack allocator for freeToLastMarker()
0- mutex created inside the mutexManager
0- singleton superclass
0- AutoCalculated Bounding Box
0- Shadows: http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=27
0- Multiple Viewports: http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=42
0- possibility to apply transformations to rootnode 
0- physical children stop moving when collition is detected  
0- Scaling still incoherent

COMPLETED:

1(S)- Camera as child of sceneObject
1(V)- Childs of sceneObject
1(V)- Root as Singleton
1(S)- Input Abstraction Layer
1(V)- Merge md2Loader and md2File classes in the md2Interface
1(G)- Create unit units for testing
1(V)- Exit Bug (Memory Leak)
1(V)- Mutex Bug
1(S)- Clock Class (class is generic. You call updateFrame() for the clock instance that is keeping track of what you want, then query it anytime for fps or last frame delta)
	1(S)- fps counter with a sliding frame window (Window title now shows fps average over last 600 frames)
1(G+V)- Collada Loader
	1(V)- include the Collada in the AssetManager
	1(G+V)- multi-node collada Loader
1(V+G)- Asset Manager
	1(V)- make it Singleton
	1(G)- Texture Manager
		1(G)- MD5 hashing for checking that each file is loaded only once
	1(V)- Mesh Manager
		1(V) - MD2 Manager 
			1(G) - MD5 hashing
		1(V) - COLLADA Manager
			1(G)- MD5 hashing	
	1(V)- Mutex Manager
1(G)- Quaternions into Math Library
1(G)- Update boost test for quaternions
1(V)- A WindowManager capable of opening a window with an opengl context
	1(V)- WindowManager as Singleton
1(S)- Sound Manager
	1(S)- Sounds without movements freeze
	1(S)- fix wave file
1(V)- debug draw system
	1(V)- axis of rotation of an object via line draws
	1(V)- draw the bounding box or bounding sphere of an object
	1(V)- draw the name of the SceneNodes
1(G)- Quaternions for camera rotations
1(V)- DoubleCheck each Singleton for possible memory leak or performance optimization
1(G)- Physics SDK
	1(G)- Rewrite methods of the Transformation Class in order to work properly with physics
1(G)- Lighting System
1(G)- attach/detach camera to player model
1(V+G)- MD2 normals fixed enough
1(G)- Use Clock Class into updates/draws/synchs
1(G)- Compile everything we can as a DLL
1(G)- Engine Abstraction (setupScene, frameStarted, frameEnded)
1(G)- OpenMP utilization in for cycles
1(S)- Collada
	1(S)- Texture Bug
	1(S)- Remove Hard-Coded scaling
1(V)- Memory Manager
	1(V)- Stack Allocator
		1(V)- freeToLastMarker() method
		1(V)- EntitySpectator bug fix 
	1(V)- Single-Frame Allocator
	1(V)- Malloc/Free Overload
	1(V)- Export data to Excel
	1(V)- Memory-Categories
	1(V)- Track Max Memory Usage 
	1(V)- Singleton
	1(V)- thread Safe
	1(V)- super bug fixed

Symbology Map:

V = Valerio is working on this
G = Giacomo // //       //  //
S = Simon   // //       //  //
0 = Nobody is working on this
1 = Finished Task (who)